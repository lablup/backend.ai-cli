name: default

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pipstall -U pip setuptools
        python -m pip install -U -r requirements/lint.txt
    - name: Lint with flake8
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/flake8-matcher.json"
        fi
        python -m flake8 src/ai/backend tests

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          typecheck-mypy-${{ runner.os }}-pip-${{ matrix.python-version }}
          typecheck-mypy-${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        pip install -U pip setuptools
        pip install -U -r requirements/ci.txt
    - name: Test with pytest
      run: |
        python -m pytest --cov=ai.backend.cli -v
    - name: Send code coverage report
      uses: codecov/codecov-action@v1

  typecheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
    - name: Install dependencies
      env:
          REQUIREMENTS_FILE: typecheck
      run: |
        python -m pip install -U pip setuptools
        python -m pip install -U -r requirements/typecheck.txt
    - name: Type check with mypy
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/mypy-matcher.json"
        fi
        python -m mypy --no-color-output src/ai/backend || exit 0

  deploy-to-pypi:
      needs: [lint, typecheck, test]
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        env:
          REQUIREMENTS_FILE: build
        run: |
          sudo apt-get install libsnappy-dev
          python -m pip install -U pip setuptools
          if [ -n "$GITHUB_HEAD_REF" ]; then
            export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
          else
            export GHBRANCH="${GITHUB_REF#refs/heads/}"
          fi
          echo "HEAD: ${GHBRANCH} (${GITHUB_REF}, ${GITHUB_HEAD_REF})"
          # Use the same branch (if exists) for the backend.ai-common installation
          set +e
          git ls-remote --heads 'https://github.com/lablup/backend.ai-common' | grep -q "refs/heads/${GHBRANCH}"
          if [ $? -eq 0 ]; then
            sed -i "s%\(backend.ai-common\)@21.03%\1@${GHBRANCH}%" requirements/${REQUIREMENTS_FILE}.txt
          fi
          set -e
          python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*